//
//  HomeViewController.swift
//  BitcoinApp
//
//  Created OSX on 15/08/24.
//  Copyright Â© 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Luis Angel FR
//

import UIKit
import CoreData

class HomeViewController: UIViewController {


    //MARK: - Protocol Properties
	var presenter: HomePresenterProtocol?

    //MARK: - Properties
    var btcInfo: [btcDetail] = []
    
    lazy private var infoLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 20)
        label.text = "Total balance"
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy private var priceLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 40)
        label.text = "$426.75"
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy private var favoriteLabel: UILabel = {
        let label = UILabel()
        label.text = "Favorito"
        label.font = .systemFont(ofSize: 24)
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    lazy private var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.itemSize = .init(width: width-50, height: 100)
        layout.minimumLineSpacing = 15
//        layout.minimumInteritemSpacing = 20
        let collectioView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectioView.translatesAutoresizingMaskIntoConstraints = false
        return collectioView
    }()
    
    //MARK: - Life Cycle
    override func viewDidLoad(){
        super.viewDidLoad()
        view.backgroundColor = .white
        print("viewcontroller")
        presenter?.getInitData()
        setupUI()
    }
    
    //MARK: - Methods
}

//MARK: - View Methods
extension HomeViewController: HomeViewProtocol {
    
    func info(datos: [btcDetail]) {
        btcInfo = datos
        print("los datos ya estan en la view :::::::::: \(datos)")
        DispatchQueue.main.async {
            self.collectionView.reloadData()
        }
    }
    
    func setupUI() {
        view.addSubview(collectionView)
        view.addSubview(infoLabel)
        view.addSubview(priceLabel)
        
        collectionView.backgroundColor = .white
        collectionView.dataSource = self
        collectionView.delegate = self
        collectionView.register(CollectionViewCell.self, forCellWithReuseIdentifier: "CollectionViewCell")
        
        NSLayoutConstraint.activate([
        
            collectionView.topAnchor.constraint(equalTo: view.topAnchor, constant: height/2-150),
            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            collectionView.bottomAnchor.constraint(equalTo: view.layoutMarginsGuide.bottomAnchor),
            
            infoLabel.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor),
            infoLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10),
            
            priceLabel.topAnchor.constraint(equalTo: infoLabel.bottomAnchor, constant: 10),
            priceLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 10)
            
                   

        ])
    }
    
}

//MARK: - Private functions

extension HomeViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        btcInfo.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
       let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "CollectionViewCell", for: indexPath) as! CollectionViewCell
        cell.backgroundColor = .systemGray5
        let model = btcInfo[indexPath.row]
        cell.configuration(model: model)
        cell.layer.cornerRadius = 10
        cell.layer.masksToBounds = true
        return cell
    }
    
}

