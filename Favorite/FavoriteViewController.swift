//
//  FavoriteViewController.swift
//  BitcoinApp
//
//  Created OSX on 20/08/24.
//  Copyright Â© 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Luis Angel FR
//

import UIKit
import CoreData

class FavoriteViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
 
    //MARK: - Protocol Properties
	var presenter: FavoritePresenterProtocol?

    //MARK: - Properties
    var monedaFavorita = [BtcModel]()
    let contex = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
  
    lazy private var refreshControl: UIRefreshControl = {
        let refresh = UIRefreshControl()
        refresh.addTarget(self, action: #selector(FavoriteViewController.actualizarDatos(_:)), for: .valueChanged)
        refresh.tintColor = .black
        return refresh
    }()
    
    lazy private var tableView: UITableView = {
        let table = UITableView()
        table.register(FavoriteTableViewCell.self, forCellReuseIdentifier: "FavoriteTableViewCell")
        table.translatesAutoresizingMaskIntoConstraints = false
        return table
    }()
    
    //MARK: - Life Cycle
	override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        datosGuardados()
        print("datos moneda favorita \(monedaFavorita)")
    }
    
    //MARK: - Methods
    func setupUI() {
        view.addSubview(tableView)
        
        tableView.backgroundColor = .white
        tableView.dataSource = self
        tableView.delegate = self
        self.tableView.addSubview(refreshControl)
        
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.layoutMarginsGuide.bottomAnchor),
        ])
    }
    
    func datosGuardados() {
        let data: NSFetchRequest<BtcModel> = BtcModel.fetchRequest()
        
        do{
            monedaFavorita = try contex.fetch(data)
            
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
          
        }catch{
            print(error.localizedDescription)
        }
      
    }
}

//MARK: - View Methods
extension FavoriteViewController: FavoriteViewProtocol {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        monedaFavorita.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "FavoriteTableViewCell", for: indexPath) as! FavoriteTableViewCell
        cell.backgroundColor = .systemGray5
        let model = monedaFavorita[indexPath.row]
        cell.configuration(model: model)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        let accionEliminar = UIContextualAction(style: .normal, title: "eliminar") { _, _, _ in
            self.contex.delete(self.monedaFavorita[indexPath.row])
            self.monedaFavorita.remove(at: indexPath.row)
            self.guardar()
        }
        accionEliminar.backgroundColor = .red
        return UISwipeActionsConfiguration(actions: [accionEliminar])
    }
}

//MARK: - Private functions
extension FavoriteViewController {
    
    func guardar() {
        do {
            try contex.save()
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        } catch {
            print(error.localizedDescription)
        }
    }
    
    @objc func actualizarDatos(_ refresh: UIRefreshControl) {
        self.tableView.reloadData()
        refreshControl.endRefreshing()
    }
    
}
